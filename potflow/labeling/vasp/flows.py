from __future__ import annotations

from dataclasses import dataclass, field
from pathlib import Path

from atomate2.vasp.jobs.base import BaseVaspMaker
from atomate2.vasp.jobs.core import RelaxMaker as Atomate2RelaxMaker
from jobflow import Flow, Maker
from pymatgen.core.structure import Structure

from potflow.labeling.vasp.jobs import StructureComposeMaker


@dataclass
class RelaxMaker(Maker):
    """
    Abstract class for data labeling.

    Args:
        structure_composer: A maker to generate structure(s) from the input parent
            structure, e.g. `StrainedStructureMaker`.
        structure_composer_kwargs: Keyword arguments passed to the structure_composer.
        relax_parent_structure: Whether to relax the input parent structure.
        relax_generated_structure: Whether to relax the generated structure(s).
        relax_maker: Atomate2 relax maker used to relax the parent structure (if
        `realx_parent_structure=True`)and the generated structure(s) (if
        `relax_generated_structure=True`). Default to
            `atomate2.vasp.jobs.core.RelaxMaker`. Other options include `StaticMaker`
            and `TightRelaxMaker` in `atomate2.vasp.jobs.core`,
            as well as `DoubleRelaxMaker` in `atomate2.vasp.flows.core`.
        name: Name of the flow generated by the maker.
    """

    structure_composer: StructureComposeMaker = None
    structure_composer_kwargs: dict = field(default_factory=dict)
    relax_parent_structure: bool = True
    relax_generated_structure: bool = True
    relax_maker: BaseVaspMaker = field(default_factory=Atomate2RelaxMaker)
    name: str = "potflow relax"

    def make(self, structure: Structure, prev_vasp_dir: str | Path | None = None):
        jobs = []

        # relax parent structure
        if self.relax_parent_structure:
            j = self.relax_maker.make(structure, prev_vasp_dir=prev_vasp_dir)
            jobs.append(j)
            j.name += "_parent"

            structure = j.output.structure
            prev_vasp_dir = j.output.dir_name

        # generate structures
        composer = self.structure_composer(**self.structure_composer_kwargs)
        generated_structure = composer.make(structure)
        jobs.append(generated_structure)

        # TODO enable the check the type of OutputReference.
        #
        # # relax generated structures
        # if not isinstance(generated_structure.output, (tuple, list)):
        #     generated_structure = [generated_structure]

        # job for generated structures
        for i, struct in enumerate(generated_structure.output):
            j = self.relax_maker.make(struct, prev_vasp_dir=prev_vasp_dir)
            jobs.append(j)
            j.name += "_generated_{i}"

        # TODO, think about what is the appropriate output here
        flow = Flow(jobs=jobs, output=None, name=self.name)

        return flow
